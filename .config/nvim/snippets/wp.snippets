# Vim snippets for WordPress
#
# http://sudarmuthu.com/wordpress
#
#  Copyright 2013 Sudar Muthu  (http://sudarmuthu.com)
#  ------------------------------------------------------------------------------
#  "THE BEER-WARE LICENSE" (Revision 42):
#  Sudar <http://sudarmuthu.com> wrote this file.
#  As long as you retain this notice you can do whatever you want with this stuff.
#  If we ever meet and you are overcome with gratitude,
#  feel free to express your feelings via beverage :)
#  ------------------------------------------------------------------------------

# TODO: Generate theme skeleton
# TODO: custom box snippet
# TODO: Table generation code

snippet wp_plugin "Plugin Header" b
	/**
	 * Plugin Name: ${1:Plugin Name}
	 * Version ${2:1.0.0}
	 * Description: ${3}
	 * Plugin URI:  ${4:`!v get(b:, 'snips_author_url', 'Please, set b:snips_author_url')`/${1/.*/\= luaeval("textcase.to_dash_case(_A or '')", submatch(0))/g}}
	 *
	 * Author:      ${5:`!v get(b:, 'snips_author', 'Please, set b:snips_author')`}
	 * Author URI:  ${6:`!v get(b:, 'snips_author_url', 'Please, set b:snips_author_url')`}
	 *
	 * Text Domain: ${1/.*/\= luaeval("textcase.to_dash_case(_A or '')", submatch(0))/g}
	 * Domain Path: /lang/
	 * Requires at least: 5.9,
	 * Tested up to: 6.0,
	 *
	 * License:     GPLv2 or later
	 * License URI: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
	 *
	 * @package ${1}
	 * @author ${5:`!v get(b:, 'snips_author', 'Please, set b:snips_author')`}
	 * @since ${2:1.0.0}
	 */

	namespace ${7:${5/.*/\= luaeval("textcase.to_pascal_case(_A or '')", submatch(0))/g}\\${1/.*/\= luaeval("textcase.to_pascal_case(_A or '')", submatch(0))/g}};

	if ( ! defined( 'ABSPATH' ) ) {
		exit;
	}

	require_once 'includes/class-${1/.*/\= luaeval("textcase.to_dash_case(_A or '')", submatch(0))/g}.php';

	/**
	 * Returns the main instance of ${1} to prevent the need to use globals.
	 *
	 * @since  ${2:1.0.0}
	 * @return object ${1/.*/\= luaeval("textcase.to_title_case(_A or ''):gsub(' ', '_')", submatch(0))/g}
	 */
	function ${1/.*/\= luaeval("textcase.to_snake_case(_A or '')", submatch(0))/g}() {
		$instance = ${1/.*/\= luaeval("textcase.to_title_case(_A or ''):gsub(' ', '_')", submatch(0))/g}::instance( __FILE__, '${2:1.0.0}' );

		return $instance;
	}

	${1/.*/\= luaeval("textcase.to_snake_case(_A or '')", submatch(0))/g}();


snippet wp_plugin_header "Plugin Header" b
	/**
	 * Plugin Name: ${1:`!l textcase.to_title_case(vim.fn.expand('%:p:t:r'))`}
	 * Version ${2:1.0.0}
	 * Description: ${3}
	 * Plugin URI:  ${4:`!v get(b:, 'snips_author_url', 'Please, set b:snips_author_url')`/${1/.*/\= luaeval("require('textcase').api.to_dash_case(_A or '')",submatch(0))/g}}
	 *
	 * Author:      ${5:`!v get(b:, 'snips_author', 'Please, set b:snips_author')`}
	 * Author URI:  ${6:`!v get(b:, 'snips_author_url', 'Please, set b:snips_author_url')`}
	 *
	 * Text Domain: ${1/.*/\= luaeval("require('textcase').api.to_dash_case(_A or '')",submatch(0))/g}
	 * Domain Path: /lang/
	 * Requires at least: 5.9,
	 * Tested up to: 6.0,
	 *
	 * License:     GPLv2 or later
	 * License URI: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
	 *
	 * @package ${1}
	 * @author ${5:`!v get(b:, 'snips_author', 'Please, set b:snips_author')`}
	 * @since ${2:1.0.0}
	 */


snippet abs_ex "Exit if ABSPATH is not defined" b
	defined( 'ABSPATH' ) || exit; // Exit if accessed directly


snippet ifajax "If AJAX check" b
	if ( defined( 'DOING_AJAX' ) && DOING_AJAX ) {
		${1}
	}


#  ------------------------------------------------------------------------------
# Factory and Constructors
#  ------------------------------------------------------------------------------
snippet factory "Hybrid Factory Method" b
	/**
	 * Make this class a "hybrid Singleton".
	 *
	 * @static
	 * @since ${1:1.0.0}
	 */
	public static function factory() {
		static $instance = false;

		if ( ! $instance ) {
			$instance = new self;
		}

		return $instance;
	}

snippet factory_const "Hybrid Factory Method" b
	/**
	 * Use \`factory()\` method to create instance of this class.
	 * Don't create instances directly
	 *
	 * @since ${1:1.0.0}
	 *
	 * @see factory()
	 */
	public function __construct() {
		${2:$this->setup_hooks();}
	}

snippet __c "public __construct" b
	/**
	 * Construct a new object.
	 */
	public function __construct(${1:}) {
		${2:$this->setup_hooks();}
	}


snippet f_hook "Setup Hooks Function" b
	/**
	 * Setup Hooks.
	 *
	 * @since ${3:1.0.0}
	 */
	protected function setup_hooks() {
		add_action( '${1:save_post}', array( $this, '${2:function_name}' ) );
	}

#  ------------------------------------------------------------------------------
# Data Validation functions
#  ------------------------------------------------------------------------------
snippet _h "esc_html__"
	esc_html__( '${1}', '${2}' )${3:;}

snippet _eh "esc_html_e"
	esc_html_e( '${1}', '${2}' )${3:;}


snippet _a "esc_attr__"
	esc_attr__( '${1}', '${2}' )${3:;}


snippet _ea "esc_attr_e"
	esc_attr_e( '${1}', '${2}' )${3:;}


snippet ea "esc_attr"
	esc_attr( '${1}' )${2:;}


snippet eu "esc_url"
	esc_url( '${1}' )${2:;}


snippet ee "esc_email"
	esc_email( '${1}' )${2:;}


#  ------------------------------------------------------------------------------
# Actions and filters
#  ------------------------------------------------------------------------------
snippet add_action "add_action function" b
	add_action( '${1:init}', ${2:'plugin_init'} );

snippet add_action_class "add_action using class" w
	add_action( '${1}', array( ${3:$this}, '${2}' ) );

snippet add_action_namespace "add_action using namespace" b
	add_action( '${1}', __NAMESPACE__ . '\\${2}' );


snippet af "add_filter function" b
	add_filter( '${1}', '${2}' );


snippet afc "add_filter using class" b
	add_filter( '${1}', array( ${3:$this}, '${2}' ) );


snippet afn "add_filter using namespace" b
	add_filter( '${1}', __NAMESPACE__ . '\\${2}' );


#  ------------------------------------------------------------------------------
# Shortcode
#  ------------------------------------------------------------------------------
snippet scode "Add shortcode" b
	add_shortcode( '${1}', '${2}' );


snippet scodec "Add shortcode using class" b
	add_shortcode( '${1}', array( $this, '${2}' ) );


snippet scoden "Add shortcode using namespace" b
	add_shortcode( '${1}', __NAMESPACE__ . '\\${2}' );


snippet scodenf "Add shortcode and callback function using namespace" b
	function $2( ${3:\$atts} ) {
		$a = shortcode_atts( array(
			'${4}' => '${5}',
		), $3 );

		return ${6};
	}
	add_shortcode( '${1}', __NAMESPACE__ . '\\${2}' );


#  ------------------------------------------------------------------------------
# Cron related functions
#  ------------------------------------------------------------------------------
snippet schedule "Schedule cron job" b
	wp_schedule_event( '${3:time()}', '${2:hourly}', '${1}' );


snippet clear_schedule "Clear Scheduled cron job" b
	wp_clear_scheduled_hook( '${1}' );


#  ------------------------------------------------------------------------------
# HTTP API functions
#  ------------------------------------------------------------------------------
snippet wp_get "Do a remote get request using wp_remote_get" b
	$${2:response} = wp_remote_get( ${1:$url}, array(
			'${3:timeout}' => ${4:3},
		) );

	if ( ! is_wp_error( $$2 ) ) {
		return wp_remote_retrieve_body( $$2 );
	} else {
		throw new Exception( 'Error message: ' . $$2->get_error_message() );
	}


snippet wp_post "Do a remote post request using wp_remote_post" b
	$${2:response} = wp_remote_post( ${1:$url}, array(
			'${3:timeout}' => ${4:3},
		) );

	if ( ! is_wp_error( $$2 ) ) {
		return wp_remote_retrieve_body( $$2 );
	} else {
		throw new Exception( 'Error message: ' . $$2->get_error_message() );
	}


#  ------------------------------------------------------------------------------
# Getters and setters using WordPess coding sytle
#  ------------------------------------------------------------------------------
snippet gs_wp "PHP Class Getter Setter using WordPress coding style" b
	/**
	 * Getter for $1.
	 *
	 * @return $2 Current value of $1
	 */
	public function get_$1() {
		return $this->$1;
	}

	/**
	 * Setter for $1.
	 *
	 * @param ${2:string} $$1 New value for $1
	 */
	public function set_${1}( $$1 ) {
		$this->$1 = $$1;
	}
	${3}


#  ------------------------------------------------------------------------------
# WordPress style PHPDoc snippets
#  ------------------------------------------------------------------------------
snippet pi "PHPDoc int param"
	@param int $${1:var} ${2:Desc}


snippet ri "PHPDoc int return"
	@return int ${1:Desc}


snippet ps "PHPDoc string param"
	@param string $${1:var} ${2:Desc}


snippet rs "PHPDoc string return"
	@return string ${1:Desc}


snippet pb "PHPDoc bool param"
	@param bool $${1:var} ${2:Desc}


snippet rb "PHPDoc bool return"
	@return bool ${1:Desc}


snippet pa "PHPDoc array param"
	@param array $${1:var} ${2:Desc}


snippet ra "PHPDoc array return"
	@return array ${1:Desc}


snippet po "PHPDoc object param"
	@param object $${1:var} ${2:Desc}


snippet ro "PHPDoc object return"
	@return object ${1:Desc}


snippet ap "PHPDoc access private"
	@access private


snippet apr "PHPDoc access protected"
	@access protected


snippet apu "PHPDoc access public"
	@access public


#  ------------------------------------------------------------------------------
# DB and WP_Query related
#  ------------------------------------------------------------------------------
snippet wp_query "WP_Query" b
	$args = array(
		'no_found_rows'          => true,  // No need for pagination
		'update_post_meta_cache' => false, // No need to fetch post meta fields
		'update_post_term_cache' => false, // No need to fetch taxonomy fields
		${2:'fields'             => 'ids',  // We need only ids}
		'${3}' => '${4}',
	);

	$wp_query = new WP_Query;
	$${1:result} = $wp_query->query( $args );


#  ------------------------------------------------------------------------------
# These should be refined a bit
#  ------------------------------------------------------------------------------

# Empty widget
snippet widget_skeleton
	class ${1} extends WP_Widget {

		public function __construct() {
			// widget actual processes
			${3}
		}

		public function form( $instance ) {
			// outputs the options form on admin
			${4}
		}

		public function update( $new_instance, $old_instance ) {
			// processes widget options to be saved
			${5}
		}

		public function widget( $args, $instance ) {
			// outputs the content of the widget
			${6}
		}

	}
	register_widget( '${2}' );


# Full widget
snippet widget "Scaffolding for widget class"
	/**
	 * Adds $1 widget.
	 */
	class ${1:Foo_Widget} extends WP_Widget {

		/**
		 * Register widget with WordPress.
		 */
		public function __construct() {
			parent::__construct(
				'${2:foo_widget}', // Base ID
				'${3:$1}', // Name
				array( 'description' => __( '${4:A $1}', '${5:text_domain}' ), ) // Args
			);
		}

		/**
		 * Front-end display of widget.
		 *
		 * @see WP_Widget::widget()
		 *
		 * @param array $args     Widget arguments.
		 * @param array $instance Saved values from database.
		 */
		public function widget( $args, $instance ) {
			$instance = wp_parse_args( $instance, array(
				'title' => '',
			) );

			echo wp_kses_post( $args['before_widget'] );

			if ( ! empty( $instance['title'] ) ) :
				echo $args['before_title'] . esc_html( $instance['title'] ) . $args['after_title'];
			endif; ?>

			<?php echo wp_kses_post( $args['after_widget'] );
		}

		/**
		 * Sanitize widget form values as they are saved.
		 *
		 * @see WP_Widget::update()
		 *
		 * @param array $new_instance Values just sent to be saved.
		 * @param array $old_instance Previously saved values from database.
		 *
		 * @return array Updated safe values to be saved.
		 */
		public function update( $new_instance, $old_instance ) {
			$instance     = array();
			$new_instance = wp_parse_args( $new_instance, array(
				'title' => '',
			) );

			$instance['title'] = strip_tags( $new_instance['title'] );

			return $instance;
		}

		/**
		 * Back-end widget form.
		 *
		 * @see WP_Widget::form()
		 *
		 * @param array $instance Previously saved values from database.
		 */
		public function form( $instance ) {
			$instance = wp_parse_args( $instance, array(
				$title = __( 'New title', '$5' ),
			) );
			?>

			<p>
				<label for="<?php echo $this->get_field_id( 'title' ); ?>"><?php esc_html_e( 'Title:', '$5' ); ?></label>
				<input class="widefat" id="<?php echo $this->get_field_id( 'title' ); ?>" name="<?php echo $this->get_field_name( 'title' ); ?>" type="text" value="<?php echo esc_attr( $instance['title'] ); ?>">
			</p>

			<?php
		}
	}

	// register $1 widget
	add_action( 'widgets_init', create_function( '', 'register_widget( "$1" );' ) );


